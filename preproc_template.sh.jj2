#!/bin/bash

#SBATCH --job-name="{{job_name}}"
#SBATCH --partition={{partition}}
#SBATCH --nodes={{nodes}}
#SBATCH --ntasks-per-node={{ntasks_per_node}}
#SBATCH --mem-per-cpu={{mem_per_cpu}}
{% if node_list != None %}
#SBATCH --nodelist={{node_list}}
{% endif %}
### FLASH reads assembly ###
echo 'Assembling...'
{% for i in reads %}
  flash {{i[1]}} {{i[2]}} -o {{i[0]}}
{% endfor %}
echo 'DONE!'
### ORF filtering ###
echo 'ORFs filtering...'
agmfi.py .
echo 'DONE!'
### MAFFT alignment ###
echo 'Aligning...'
{% for i in reads %}
  mafft --thread {{processors}} {{i[0]}}.extendedFrags.fasta > {{i[0]}}.mafft
{% endfor %}
### Preprocessing temporarily with mothur ###
{% for i in reads %}
  echo 'unique.seqs(fasta={{i[0]}}.mafft)' | mothur
  echo 'screen.seqs(processors={{processors}}, fasta={{i[0]}}.unique.mafft, optimize=start-end, criteria=98)' | mothur
{% endfor %}
### RAxML tree construction ###
echo 'Building tree...'
{% for i in reads %}
  {% if rax_version != None %}
    raxmlHPC-PTHREADS-{{rax_version}} -T {{processors}} -m GTRGAMMA -p 12345 -s {{i[0]}}.unique.mafft -# 20 -n {{job_name}}_{{i[0]}}
  {% else %}
    raxmlHPC-PTHREADS -T {{processors}} -m GTRGAMMA -p 12345 -s {{i[0]}}.unique.mafft -# 20 -n {{job_name}}_{{i[0]}}
  {% endif %}
  mothulity_draw.py --tree RAxML_bestTree.{{job_name}}_{{i[0]}}
  headnode_notifier.py {{notify_email}} --subject 'Tree RAxML_bestTree.{{job_name}}_{{i[0]}}' --attach RAxML_bestTree.{{job_name}}_{{i[0]}}.svg
{% endfor %}
echo 'DONE!'
{% if notify_email != None %}
echo 'Sending notification...'
headnode_notifier.py {{notify_email}} --subject '{{job_name}} has finished'
{% else %}
{% endif %}
